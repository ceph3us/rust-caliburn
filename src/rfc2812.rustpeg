// PEG specification for RFC2812
// Copyright (c) 2015, Michael Holmes <holmesmich@gmail.com>. All right reserved.
// See included LICENSE.md in for licensing info.

use line_parser::{Message, Prefix, Command};
use line_parser::Prefix::{User, Server, NoPrefix};
use line_parser::Command::{Verb, Numeric};

#[pub]
irc_msg -> Message<'input>
  = pre:prefix? cmd:command ps:params? { Message {
      prefix: match pre {
        Some(res) => res,
	None 	  => NoPrefix
      },
      command: cmd,
      params: match ps {
      	Some(ps) => ps,
	None	 => vec![]
      }
    }
  }

prefix -> Prefix<'input>
  = ":" t:host " " { Server(t) }
  / ":" n:nickname hs:host_segment? " " {
    match hs {
      Some(seg) => {
        let (u, h) = seg;
        User { nickname: n, user: u, host: Some(h) }
      },
      None => User { nickname: n, user: None, host: None }
    }
  }

#[pub]
host -> &'input str
  = hostaddr { match_str }
  / hostname { match_str }
  

#[pub]
nickname -> &'input str
  = [a-zA-Z0-9\x5B-\x60\x7B-\x7D] nick_str { match_str }

nick_char
  = [a-zA-Z0-9\x5B-\x60\x7B-\x7D\-]

nick_str -> &'input str
  = nick_char{1,} { match_str }

user_str -> &'input str
  = (nick_char{1} / "~") nick_char* { match_str }

hostname -> &'input str
  = shortname ** "." "."{,1} { match_str }

shortname
  = [a-zA-Z0-9] [a-zA-Z0-9\-/]* [a-zA-Z0-9]*

hostaddr -> &'input str
  = ip4addr { match_str }
  / ip6addr { match_str }

ip4addr
  = digit{1,3} "." digit{1,3} "." digit{1,3} "." digit{1,3}

ip6addr_trailing_seg_upper
 = ":" hexdigit_upper{1,4}

ip6addr_trailing_seg_lower
 = ":" hexdigit_lower{1,4}

ip6addr
  = hexdigit_upper{1,4} ip6addr_trailing_seg_upper{7}
  / hexdigit_lower{1,4} ip6addr_trailing_seg_lower{7}
  / "0:0:0:0:0:" ("FFFF" / "ffff" / "0") ":" ip4addr

host_segment -> (Option<&'input str>, &'input str)
  = u:username? "@" h:host { (u, h) }

username -> &'input str
  = "!" u:user_str { u }

nospacecrlf -> &'input str
  = [\x01-\x09\x0B-\x0C\x0E-\x1F\x21-\x39\x3B-\xFF]+ { match_str }

trailing -> &'input str
  = [\x01-\x09\x0B-\x0C\x0E-\x1F\x21-\x39\x3B-\xFF :]+ { match_str }

letters -> &'input str
  = [a-zA-Z]+ {
    let result = match_str;
    result
  }

digit
  = [0-9]

hexdigit_upper
  = digit / "A"

hexdigit_lower
  = "a"


numeric -> &'input str
  = digit{3} { match_str }

command -> Command<'input>
  = letters{1,} { Verb(match_str) }
  / numeric { Numeric(match_str.parse().unwrap()) }

params -> Vec<String>
  = m:middle_params? l:last_param? {
    match m {
      Some(params) => {
        let mut out = params;
	match l {
	  Some(finalp) => out.push(finalp),
	  None => ()
	};
        out
      }
      None => {
      	match l {
	  Some(finalp) => vec![finalp],
	  None 	      => vec![]
	}
      }
    }
  }

nospacecrlfcol -> &'input str
  = nospacecrlf / ":" { match_str }

middle_param -> String
  = " " s:nospacecrlf t:nospacecrlfcol* { let mut tmp = match_str.to_string(); tmp.remove(0); tmp }

middle_params -> Vec<String>
  = middle_param{1,14}

last_param -> String
  = " " ":" t:trailing { t.to_string() }
